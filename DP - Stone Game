class Solution {
public:
    bool stoneGame(vector<int>& A) {
        int n = A.size();
        int dp[n][n];
        memset(dp, 0, sizeof dp);
        for(int g =0;g<n;g++)                      //Gap strategy again: Same as that of Optimal BST
        {
            for(int i=0, j =g;j<n;j++,i++)
            {
                if(g == 0)
                    dp[i][j] = A[i];
                else if(g == 1)
                    dp[i][j] = max(A[i], A[j]);
                else {
                    int x = A[i] + min(dp[i+2][j], dp[i+1][j-1]);
                    int y = A[j] + min(dp[i][j-2], dp[i+1][j-1]);
                    dp[i][j] = max(x,y);
                }
            }
        }
        return dp[0][n-1]?1:0;
    }
};
int main()
{
  int n;
  cin>>n;
  vector<int> A(n);
  for(int i=0;i<n;i++)
    cin>>A[i];
  Solution obj;
  obj.stoneGame(A);
   return 0;
}
