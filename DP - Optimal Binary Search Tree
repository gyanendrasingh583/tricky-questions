#include <bits/stdc++.h>
using namespace std;
void solve(vector<int> &A, vector<int> &F, int n)
{
    vector<int> S(n+1);
        for(int i=0;i<n;i++)
        S[i+1] = S[i] + F[i];
        int dp[n][n];
        for(int g =0;g<n;g++)                      // Gap strategy: Also used in the questions of game theory like Alice and Bob, Stone Game, .., etc.
        {
            for(int i=0, j = g; j<n; i++,j++)
            {
                if(g == 0)
                    dp[i][j] = F[i];
                else if(g == 1)
                    dp[i][j] = min(F[i] + 2*F[j], F[j] + 2*F[i]);
                else
                {   
                    int fs = INT_MAX;
                    for(int k = i;k<=j;k++)
                    {   
                        int left = (k!=i?dp[i][k-1]:0);                    // left count when we make the kth element as the root node
                        int right = (k!=j?dp[k+1][j]:0);                   // right count when we make the kth element as the root node
                        fs = min(fs, left + right);                        // update min for every possible arrangement
                    }
                    dp[i][j] = S[j+1]- S[i] + fs;                          // since we have added the kth node also, that means height of every successive node will increase by 1
                }
            }
        }
        cout<<dp[0][n-1];
}
int main()
{
    int n;
    cin>>n;
    vector<int> keys(n), freq(n);
    for(int i=0;i<n;i++)
        cin>>keys[i];
    for(int i=0;i<n;i++)
        cin>>freq[i];
    solve(keys, freq, n);
    return 0;
}
